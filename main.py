import discord
from discord.ext import commands, tasks
from discord import app_commands
import json
import random
import time
from datetime import datetime
import os
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'TOKEN': 'MTQzMjM2MTcxMDg4MjEyODA3Nw.GquORF.kx_TO1GWRpfNRE2J77kuM0fkAdsLRFYBafMLuc',
    'MAX_LEVEL': 1000,
    'TEXT_XP_MIN': 5,
    'TEXT_XP_MAX': 10,
    'TEXT_COOLDOWN': 30,  # —Å–µ–∫—É–Ω–¥—ã
    'VOICE_XP_PER_MINUTE': 5,
    'XP_PER_LEVEL': 100
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix='!', intents=intents)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
server_settings = {}
cooldowns = {}
voice_tracking = {}
DATA_FILE = 'userdata.json'
SETTINGS_FILE = 'settings.json'


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global user_data, server_settings
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                user_data = json.load(f)
        except:
            user_data = {}
    
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                server_settings = json.load(f)
        except:
            server_settings = {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=2, ensure_ascii=False)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings():
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(server_settings, f, indent=2, ensure_ascii=False)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    user_id = str(user_id)
    if user_id not in user_data:
        user_data[user_id] = {
            'text_xp': 0,
            'text_level': 1,
            'voice_xp': 0,
            'voice_level': 1,
            'total_xp': 0,
            'total_level': 1
        }
    return user_data[user_id]


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_notification_channel(guild_id):
    guild_id = str(guild_id)
    if guild_id in server_settings:
        return server_settings[guild_id].get('notification_channel')
    return None


# –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ –æ–ø—ã—Ç—É
def calculate_level(xp):
    return min(xp // CONFIG['XP_PER_LEVEL'] + 1, CONFIG['MAX_LEVEL'])


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
def add_xp(user_id, xp, xp_type):
    user_id = str(user_id)
    user = get_user_data(user_id)
    
    if xp_type == 'text':
        user['text_xp'] = max(0, user['text_xp'] + xp)
        user['text_level'] = calculate_level(user['text_xp'])
    elif xp_type == 'voice':
        user['voice_xp'] = max(0, user['voice_xp'] + xp)
        user['voice_level'] = calculate_level(user['voice_xp'])
    
    user['total_xp'] = user['text_xp'] + user['voice_xp']
    user['total_level'] = calculate_level(user['total_xp'])
    
    save_data()
    return user


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
def get_progress_bar(current_xp, level, length=20):
    xp_for_current_level = (level - 1) * CONFIG['XP_PER_LEVEL']
    xp_for_next_level = level * CONFIG['XP_PER_LEVEL']
    xp_in_level = current_xp - xp_for_current_level
    xp_needed = xp_for_next_level - xp_for_current_level
    
    if level >= CONFIG['MAX_LEVEL']:
        filled = length
    else:
        filled = int((xp_in_level / xp_needed) * length)
    
    bar = '‚ñà' * filled + '‚ñë' * (length - filled)
    percentage = int((xp_in_level / xp_needed) * 100) if level < CONFIG['MAX_LEVEL'] else 100
    
    return bar, percentage, xp_in_level, xp_needed


# –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–≤–Ω—è
def create_level_embed(user, member):
    data = get_user_data(user.id)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    text_bar, text_pct, text_current, text_needed = get_progress_bar(data['text_xp'], data['text_level'])
    voice_bar, voice_pct, voice_current, voice_needed = get_progress_bar(data['voice_xp'], data['voice_level'])
    total_bar, total_pct, total_current, total_needed = get_progress_bar(data['total_xp'], data['total_level'])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –æ–±—â–µ–º—É —É—Ä–æ–≤–Ω—é
    if data['total_level'] >= 500:
        color = discord.Color.gold()
    elif data['total_level'] >= 250:
        color = discord.Color.purple()
    elif data['total_level'] >= 100:
        color = discord.Color.blue()
    else:
        color = discord.Color.green()
    
    embed = discord.Embed(
        color=color,
        timestamp=datetime.now()
    )
    
    embed.set_author(
        name=f"–ü—Ä–æ—Ñ–∏–ª—å {member.display_name}",
        icon_url=user.display_avatar.url
    )
    
    embed.set_thumbnail(url=user.display_avatar.url)
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
    text_status = "üèÜ –ú–ê–ö–°–ò–ú–£–ú" if data['text_level'] >= CONFIG['MAX_LEVEL'] else f"{text_current}/{text_needed} XP"
    embed.add_field(
        name="",
        value=f"```md\n# üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ß–∞—Ç\n```"
              f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['text_level']}`\n"
              f"**–û–ø—ã—Ç:** `{data['text_xp']:,}` XP\n"
              f"{text_bar} `{text_pct}%`\n"
              f"{text_status}",
        inline=False
    )
    
    # –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
    voice_status = "üèÜ –ú–ê–ö–°–ò–ú–£–ú" if data['voice_level'] >= CONFIG['MAX_LEVEL'] else f"{voice_current}/{voice_needed} XP"
    embed.add_field(
        name="",
        value=f"```md\n# üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –ß–∞—Ç\n```"
              f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['voice_level']}`\n"
              f"**–û–ø—ã—Ç:** `{data['voice_xp']:,}` XP\n"
              f"{voice_bar} `{voice_pct}%`\n"
              f"{voice_status}",
        inline=False
    )
    
    # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    total_status = "üèÜ –ú–ê–ö–°–ò–ú–£–ú" if data['total_level'] >= CONFIG['MAX_LEVEL'] else f"{total_current}/{total_needed} XP"
    embed.add_field(
        name="",
        value=f"```md\n# ‚≠ê –û–±—â–∏–π –£—Ä–æ–≤–µ–Ω—å\n```"
              f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['total_level']}`\n"
              f"**–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞:** `{data['total_xp']:,}` XP\n"
              f"{total_bar} `{total_pct}%`\n"
              f"{total_status}",
        inline=False
    )
    
    embed.set_footer(
        text=f"by crysix",
        icon_url=bot.user.display_avatar.url
    )
    
    return embed


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∞
def create_leaderboard_embed(guild, top_type='total'):
    if top_type == 'text':
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['text_xp'], reverse=True)[:10]
        title = "üí¨ –¢–æ–ø-10 –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —á–∞—Ç—É"
        emoji = "üí¨"
        field = 'text'
    elif top_type == 'voice':
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['voice_xp'], reverse=True)[:10]
        title = "üé§ –¢–æ–ø-10 –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"
        emoji = "üé§"
        field = 'voice'
    else:
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['total_xp'], reverse=True)[:10]
        title = "‚≠ê –¢–æ–ø-10 –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"
        emoji = "‚≠ê"
        field = 'total'
    
    embed = discord.Embed(
        title=title,
        color=discord.Color.gold(),
        timestamp=datetime.now()
    )
    
    medals = ["ü•á", "ü•à", "ü•â"]
    description = ""
    
    for idx, (user_id, data) in enumerate(sorted_users):
        try:
            member = guild.get_member(int(user_id))
            if not member:
                continue
            
            medal = medals[idx] if idx < 3 else f"`#{idx + 1}`"
            level = data[f'{field}_level']
            xp = data[f'{field}_xp']
            
            description += f"{medal} **{member.display_name}**\n"
            description += f"„ÄÄ‚îî –£—Ä–æ–≤–µ–Ω—å: `{level}` ‚Ä¢ –û–ø—ã—Ç: `{xp:,}` XP\n\n"
        except:
            continue
    
    if not description:
        description = "*–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö*"
    
    embed.description = description
    embed.set_footer(
        text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ",
        icon_url=bot.user.display_avatar.url
    )
    
    return embed


# –°–æ–±—ã—Ç–∏–µ: –±–æ—Ç –≥–æ—Ç–æ–≤
@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    load_data()
    
    try:
        synced = await bot.tree.sync()
        print(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}')
    
    voice_xp_task.start()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞
@bot.event
async def on_message(message):
    if message.author.bot or not message.guild:
        return
    
    user_id = str(message.author.id)
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if user_id in cooldowns:
        if current_time - cooldowns[user_id] < CONFIG['TEXT_COOLDOWN']:
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    old_data = get_user_data(user_id).copy()
    xp = random.randint(CONFIG['TEXT_XP_MIN'], CONFIG['TEXT_XP_MAX'])
    new_data = add_xp(user_id, xp, 'text')
    
    cooldowns[user_id] = current_time
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    if new_data['text_level'] > old_data['text_level']:
        embed = discord.Embed(
            title="üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!",
            description=f"{message.author.mention} –¥–æ—Å—Ç–∏–≥ **{new_data['text_level']}** —É—Ä–æ–≤–Ω—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —á–∞—Ç–µ!",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        embed.set_thumbnail(url=message.author.display_avatar.url)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_channel_id = get_notification_channel(message.guild.id)
        if notification_channel_id:
            channel = bot.get_channel(int(notification_channel_id))
            if channel:
                await channel.send(embed=embed)
            else:
                await message.channel.send(embed=embed)
        else:
            await message.channel.send(embed=embed)
    
    await bot.process_commands(message)


# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
@bot.event
async def on_voice_state_update(member, before, after):
    if member.bot:
        return
    
    user_id = str(member.id)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
    if before.channel is None and after.channel is not None:
        voice_tracking[user_id] = time.time()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    elif before.channel is not None and after.channel is None:
        if user_id in voice_tracking:
            join_time = voice_tracking[user_id]
            duration = time.time() - join_time
            minutes = int(duration / 60)
            
            if minutes > 0:
                old_data = get_user_data(user_id).copy()
                xp = minutes * CONFIG['VOICE_XP_PER_MINUTE']
                new_data = add_xp(user_id, xp, 'voice')
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                if new_data['voice_level'] > old_data['voice_level']:
                    embed = discord.Embed(
                        title="üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!",
                        description=f"{member.mention} –¥–æ—Å—Ç–∏–≥ **{new_data['voice_level']}** —É—Ä–æ–≤–Ω—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ!",
                        color=discord.Color.green(),
                        timestamp=datetime.now()
                    )
                    embed.set_thumbnail(url=member.display_avatar.url)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    notification_channel_id = get_notification_channel(member.guild.id)
                    if notification_channel_id:
                        channel = bot.get_channel(int(notification_channel_id))
                        if channel:
                            await channel.send(embed=embed)
            
            del voice_tracking[user_id]


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
@tasks.loop(minutes=1)
async def voice_xp_task():
    for user_id in list(voice_tracking.keys()):
        add_xp(user_id, CONFIG['VOICE_XP_PER_MINUTE'], 'voice')


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
@bot.tree.command(name="—É—Ä–æ–≤–µ–Ω—å", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É —Å —É—Ä–æ–≤–Ω–µ–º")
async def level_command(interaction: discord.Interaction):
    embed = create_level_embed(interaction.user, interaction.user)
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@bot.tree.command(name="–ø—Ä–æ—Ñ–∏–ª—å", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.describe(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def profile_command(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member = None):
    target = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    embed = create_level_embed(target, target)
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: —Ç–æ–ø –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É
@bot.tree.command(name="—Ç–æ–ø_—Ç–µ–∫—Å—Ç", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —á–∞—Ç—É")
async def top_text_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'text')
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: —Ç–æ–ø –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É
@bot.tree.command(name="—Ç–æ–ø_–≤–æ–π—Å", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")
async def top_voice_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'voice')
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: –æ–±—â–∏–π —Ç–æ–ø
@bot.tree.command(name="—Ç–æ–ø", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
async def top_total_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'total')
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.tree.command(name="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∫–∞–Ω–∞–ª", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(–∫–∞–Ω–∞–ª="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")
async def set_channel_command(interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    guild_id = str(interaction.guild.id)
    if guild_id not in server_settings:
        server_settings[guild_id] = {}
    
    server_settings[guild_id]['notification_channel'] = str(–∫–∞–Ω–∞–ª.id)
    save_settings()
    
    embed = discord.Embed(
        description=f"‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {–∫–∞–Ω–∞–ª.mention}",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: –≤—ã–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–¥–∞—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–í—ã–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–¢–∏–ø –æ–ø—ã—Ç–∞",
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–¢–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def give_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str],
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    add_xp(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø.value)
    
    type_name = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π" if —Ç–∏–ø.value == "text" else "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    embed = discord.Embed(
        description=f"‚úÖ –í—ã–¥–∞–Ω–æ **{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}** XP ({type_name}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: —É–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="—É–±—Ä–∞—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–£–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–¢–∏–ø –æ–ø—ã—Ç–∞",
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–¢–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def remove_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str],
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    add_xp(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, -–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø.value)
    
    type_name = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π" if —Ç–∏–ø.value == "text" else "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    embed = discord.Embed(
        description=f"‚úÖ –£–±—Ä–∞–Ω–æ **{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}** XP ({type_name}) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="—Å–±—Ä–æ—Å–∏—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–ß—Ç–æ —Å–±—Ä–æ—Å–∏—Ç—å"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–í—Å—ë", value="all"),
    app_commands.Choice(name="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–¢–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def reset_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str]
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    user_id = str(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    user = get_user_data(user_id)
    
    if —Ç–∏–ø.value == "all":
        user['text_xp'] = 0
        user['text_level'] = 1
        user['voice_xp'] = 0
        user['voice_level'] = 1
        user['total_xp'] = 0
        user['total_level'] = 1
        reset_text = "–≤—Å–µ"
    elif —Ç–∏–ø.value == "text":
        user['text_xp'] = 0
        user['text_level'] = 1
        user['total_xp'] = user['voice_xp']
        user['total_level'] = calculate_level(user['total_xp'])
        reset_text = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π"
    elif —Ç–∏–ø.value == "voice":
        user['voice_xp'] = 0
        user['voice_level'] = 1
        user['total_xp'] = user['text_xp']
        user['total_level'] = calculate_level(user['total_xp'])
        reset_text = "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    save_data()
    
    embed = discord.Embed(
        description=f"‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã ({reset_text})",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å_–±–æ—Ç–∞", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–º–∞–∫—Å. 100)",
    –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)"
)
async def clear_bot_command(
    interaction: discord.Interaction,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 50,
    –∫–∞–Ω–∞–ª: discord.TextChannel = None
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1 or –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!", ephemeral=True)
        return
    
    channel = –∫–∞–Ω–∞–ª or interaction.channel
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await interaction.response.send_message(f"üßπ –û—á–∏—â–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞...", ephemeral=True)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç –±–æ—Ç–∞
        def is_bot_message(msg):
            return msg.author == bot.user
        
        deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, check=is_bot_message, before=interaction.created_at)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = await interaction.followup.send(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ {channel.mention}",
            ephemeral=True
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        await report.delete()
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", ephemeral=True)


# –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å_–∫–∞–Ω–∞–ª", description="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–º–∞–∫—Å. 100)",
    –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)",
    —É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ="–£–¥–∞–ª–∏—Ç—å —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
)
async def clear_channel_command(
    interaction: discord.Interaction,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 50,
    –∫–∞–Ω–∞–ª: discord.TextChannel = None,
    —É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: bool = False
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1 or –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!", ephemeral=True)
        return
    
    channel = –∫–∞–Ω–∞–ª or interaction.channel
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await interaction.response.send_message(f"üßπ –û—á–∏—â–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ...", ephemeral=True)
    
    try:
        if —É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, before=interaction.created_at)
            message_type = "–≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            def is_bot_message(msg):
                return msg.author == bot.user
            
            deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, check=is_bot_message, before=interaction.created_at)
            message_type = "—Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = await interaction.followup.send(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} {message_type} –≤ {channel.mention}",
            ephemeral=True
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        await report.delete()
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", ephemeral=True)


# –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å_–∫–æ–º–∞–Ω–¥—ã", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–ª–µ—à–∏-–∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–º–∞–∫—Å. 100)",
    –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)"
)
async def clear_commands_command(
    interaction: discord.Interaction,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 50,
    –∫–∞–Ω–∞–ª: discord.TextChannel = None
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1 or –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!", ephemeral=True)
        return
    
    channel = –∫–∞–Ω–∞–ª or interaction.channel
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await interaction.response.send_message(f"üßπ –û—á–∏—â–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", ephemeral=True)
    
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–µ—à–∏-–∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        def is_user_command(msg):
            return (not msg.author.bot and 
                   msg.content and 
                   (msg.content.startswith('/') or 'application.command' in str(msg.type)))
        
        deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, check=is_user_command, before=interaction.created_at)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = await interaction.followup.send(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {channel.mention}",
            ephemeral=True
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        await report.delete()
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", ephemeral=True)


# –ö–æ–º–∞–Ω–¥–∞: –º–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–º–∞—Å—Å–æ–≤–∞—è_–æ—á–∏—Å—Ç–∫–∞", description="–ú–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏="–ß—Ç–æ –æ—á–∏—â–∞—Ç—å",
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. 100)",
    –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
)
@app_commands.choices(—Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏=[
    app_commands.Choice(name="–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞", value="bot_all"),
    app_commands.Choice(name="–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", value="bot_commands"),
    app_commands.Choice(name="–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", value="user_messages"),
    app_commands.Choice(name="–ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", value="user_commands"),
    app_commands.Choice(name="–í—Å—ë –ø–æ–¥—Ä—è–¥", value="everything"),
])
async def mass_clear_command(
    interaction: discord.Interaction,
    —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏: app_commands.Choice[str],
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 50,
    –∫–∞–Ω–∞–ª: discord.TextChannel = None
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1 or –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!", ephemeral=True)
        return
    
    channel = –∫–∞–Ω–∞–ª or interaction.channel
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—á–∏—Å—Ç–∫–∏
    if —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏.value == "bot_all":
        def check(msg):
            return msg.author == bot.user
        type_name = "–≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"
    elif —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏.value == "bot_commands":
        def check(msg):
            return (msg.author == bot.user and 
                   (msg.embeds or "–£—Ä–æ–≤–µ–Ω—å" in msg.content or "–¢–æ–ø" in msg.content))
        type_name = "–∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"
    elif —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏.value == "user_messages":
        def check(msg):
            return not msg.author.bot
        type_name = "—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    elif —Ç–∏–ø_–æ—á–∏—Å—Ç–∫–∏.value == "user_commands":
        def check(msg):
            return (not msg.author.bot and 
                   (msg.content.startswith('/') or 'application.command' in str(msg.type)))
        type_name = "–∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:  # everything
        def check(msg):
            return True
        type_name = "–≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
    await interaction.response.send_message(f"üßπ –û—á–∏—â–∞—é {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} {type_name}...", ephemeral=True)
    
    try:
        deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, check=check, before=interaction.created_at)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = await interaction.followup.send(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} {type_name} –≤ {channel.mention}",
            ephemeral=True
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        await report.delete()
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", ephemeral=True)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.run(CONFIG['TOKEN'])