import discord
from discord.ext import commands, tasks
from discord import app_commands
import json
import random
import time
from datetime import datetime
import os
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'TOKEN': os.getenv('DISCORD_BOT_TOKEN'),
    'MAX_LEVEL': 1000,
    'TEXT_XP_MIN': 5,
    'TEXT_XP_MAX': 10,
    'TEXT_COOLDOWN': 30,  # —Å–µ–∫—É–Ω–¥—ã
    'VOICE_XP_PER_MINUTE': 5,
    'XP_PER_LEVEL': 100
}

if not CONFIG['TOKEN']:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DISCORD_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.voice_states = True
intents.guilds = True
intents.moderation = True
intents.integrations = True
intents.webhooks = True
intents.invites = True
intents.voice_states = True
intents.presences = True
intents.message_content = True
intents.reactions = True
intents.guild_messages = True
intents.guild_reactions = True
intents.guild_typing = True
intents.dm_messages = True
intents.dm_reactions = True
intents.dm_typing = True
intents.guild_scheduled_events = True

bot = commands.Bot(command_prefix='!', intents=intents)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
server_settings = {}
cooldowns = {}
voice_tracking = {}
DATA_FILE = 'userdata.json'
SETTINGS_FILE = 'settings.json'

# –¶–≤–µ—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–æ–≤
COLORS = {
    'INFO': discord.Color.blue(),
    'SUCCESS': discord.Color.green(),
    'WARNING': discord.Color.orange(),
    'ERROR': discord.Color.red(),
    'MODERATION': discord.Color.purple(),
    'LEVEL_UP': discord.Color.gold()
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global user_data, server_settings
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                user_data = json.load(f)
        except:
            user_data = {}
    
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                server_settings = json.load(f)
        except:
            server_settings = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=2, ensure_ascii=False)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings():
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(server_settings, f, indent=2, ensure_ascii=False)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    user_id = str(user_id)
    if user_id not in user_data:
        user_data[user_id] = {
            'text_xp': 0,
            'text_level': 1,
            'voice_xp': 0,
            'voice_level': 1,
            'total_xp': 0,
            'total_level': 1
        }
    return user_data[user_id]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_notification_channel(guild_id):
    guild_id = str(guild_id)
    if guild_id in server_settings:
        return server_settings[guild_id].get('notification_channel')
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
def get_log_channel(guild_id):
    guild_id = str(guild_id)
    if guild_id in server_settings:
        return server_settings[guild_id].get('log_channel')
    return None

# –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ –æ–ø—ã—Ç—É
def calculate_level(xp):
    return min(xp // CONFIG['XP_PER_LEVEL'] + 1, CONFIG['MAX_LEVEL'])

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
async def add_xp(user_id, xp, xp_type, guild=None):
    user_id = str(user_id)
    user = get_user_data(user_id)
    
    old_level = user[f'{xp_type}_level']
    
    if xp_type == 'text':
        user['text_xp'] = max(0, user['text_xp'] + xp)
        user['text_level'] = calculate_level(user['text_xp'])
    elif xp_type == 'voice':
        user['voice_xp'] = max(0, user['voice_xp'] + xp)
        user['voice_level'] = calculate_level(user['voice_xp'])
    
    user['total_xp'] = user['text_xp'] + user['voice_xp']
    user['total_level'] = calculate_level(user['total_xp'])
    
    save_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    new_level = user[f'{xp_type}_level']
    if new_level > old_level and guild:
        await send_level_up_notification(user_id, xp_type, old_level, new_level, guild)
    
    return user

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
async def send_level_up_notification(user_id, xp_type, old_level, new_level, guild):
    try:
        member = guild.get_member(int(user_id))
        if not member:
            return
        
        type_name = "—Ç–µ–∫—Å—Ç–æ–≤–æ–º" if xp_type == "text" else "–≥–æ–ª–æ—Å–æ–≤–æ–º"
        type_emoji = "üí¨" if xp_type == "text" else "üé§"
        
        embed = discord.Embed(
            title="üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!",
            description=f"{member.mention} –¥–æ—Å—Ç–∏–≥ **{new_level}** —É—Ä–æ–≤–Ω—è –≤ {type_name} —á–∞—Ç–µ!",
            color=COLORS['LEVEL_UP'],
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name=f"{type_emoji} –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω",
            value=f"**–ë—ã–ª:** `{old_level}`\n**–°—Ç–∞–ª:** `{new_level}`",
            inline=True
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéä")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_channel_id = get_notification_channel(guild.id)
        if notification_channel_id:
            channel = bot.get_channel(int(notification_channel_id))
            if channel:
                await channel.send(embed=embed)
                return
        
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª
        if guild.system_channel:
            await guild.system_channel.send(embed=embed)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–≤–Ω–µ: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
async def log_action(guild, action, description, color=COLORS['INFO'], target=None, moderator=None, reason=None):
    try:
        log_channel_id = get_log_channel(guild.id)
        if not log_channel_id:
            return
        
        channel = bot.get_channel(int(log_channel_id))
        if not channel:
            return
        
        embed = discord.Embed(
            title=f"üìù {action}",
            description=description,
            color=color,
            timestamp=datetime.now()
        )
        
        if target:
            embed.add_field(name="üë§ –£—á–∞—Å—Ç–Ω–∏–∫", value=f"{target.mention} (`{target.id}`)", inline=True)
        
        if moderator:
            embed.add_field(name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=f"{moderator.mention} (`{moderator.id}`)", inline=True)
        
        if reason:
            embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
        
        embed.set_footer(text=f"ID: {target.id if target else '–°–∏—Å—Ç–µ–º–∞'}")
        
        await channel.send(embed=embed)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
def get_progress_bar(current_xp, level, length=20):
    xp_for_current_level = (level - 1) * CONFIG['XP_PER_LEVEL']
    xp_for_next_level = level * CONFIG['XP_PER_LEVEL']
    xp_in_level = current_xp - xp_for_current_level
    xp_needed = xp_for_next_level - xp_for_current_level
    
    if level >= CONFIG['MAX_LEVEL']:
        filled = length
    else:
        filled = int((xp_in_level / xp_needed) * length)
    
    bar = '‚ñà' * filled + '‚ñë' * (length - filled)
    percentage = int((xp_in_level / xp_needed) * 100) if level < CONFIG['MAX_LEVEL'] else 100
    
    return bar, percentage, xp_in_level, xp_needed

# –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–≤–Ω—è
def create_level_embed(user, member):
    data = get_user_data(user.id)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    text_bar, text_pct, text_current, text_needed = get_progress_bar(data['text_xp'], data['text_level'])
    voice_bar, voice_pct, voice_current, voice_needed = get_progress_bar(data['voice_xp'], data['voice_level'])
    total_bar, total_pct, total_current, total_needed = get_progress_bar(data['total_xp'], data['total_level'])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –æ–±—â–µ–º—É —É—Ä–æ–≤–Ω—é
    if data['total_level'] >= 500:
        color = discord.Color.gold()
    elif data['total_level'] >= 250:
        color = discord.Color.purple()
    elif data['total_level'] >= 100:
        color = discord.Color.blue()
    else:
        color = discord.Color.green()
    
    embed = discord.Embed(
        color=color,
        timestamp=datetime.now()
    )
    
    embed.set_author(
        name=f"üìä –ü—Ä–æ—Ñ–∏–ª—å {member.display_name}",
        icon_url=user.display_avatar.url
    )
    
    embed.set_thumbnail(url=user.display_avatar.url)
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    embed.add_field(
        name="üë§ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        value=f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['total_level']}`\n"
              f"**–û–ø—ã—Ç:** `{data['total_xp']:,}` XP\n"
              f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {total_bar}\n"
              f"**{total_pct}%** ({total_current}/{total_needed} XP)",
        inline=False
    )
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
    text_status = "üèÜ –ú–ê–ö–°–ò–ú–£–ú" if data['text_level'] >= CONFIG['MAX_LEVEL'] else f"{text_current}/{text_needed} XP"
    embed.add_field(
        name="üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç",
        value=f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['text_level']}`\n"
              f"**–û–ø—ã—Ç:** `{data['text_xp']:,}` XP\n"
              f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {text_bar}\n"
              f"**{text_pct}%** ({text_status})",
        inline=True
    )
    
    # –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
    voice_status = "üèÜ –ú–ê–ö–°–ò–ú–£–ú" if data['voice_level'] >= CONFIG['MAX_LEVEL'] else f"{voice_current}/{voice_needed} XP"
    embed.add_field(
        name="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
        value=f"**–£—Ä–æ–≤–µ–Ω—å:** `{data['voice_level']}`\n"
              f"**–û–ø—ã—Ç:** `{data['voice_xp']:,}` XP\n"
              f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {voice_bar}\n"
              f"**{voice_pct}%** ({voice_status})",
        inline=True
    )
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    next_milestone = ((data['total_level'] // 100) + 1) * 100
    if next_milestone <= CONFIG['MAX_LEVEL']:
        xp_needed_total = next_milestone * CONFIG['XP_PER_LEVEL'] - data['total_xp']
        embed.add_field(
            name="üéØ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å",
            value=f"**–£—Ä–æ–≤–µ–Ω—å {next_milestone}**\n"
                  f"–û—Å—Ç–∞–ª–æ—Å—å: `{xp_needed_total:,}` XP",
            inline=False
        )
    
    embed.set_footer(
        text=f"by crysix | –û–±–Ω–æ–≤–ª–µ–Ω–æ",
        icon_url=bot.user.display_avatar.url
    )
    
    return embed

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∞
def create_leaderboard_embed(guild, top_type='total'):
    if top_type == 'text':
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['text_xp'], reverse=True)[:10]
        title = "üí¨ –¢–æ–ø-10 –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —á–∞—Ç—É"
        emoji = "üí¨"
        field = 'text'
    elif top_type == 'voice':
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['voice_xp'], reverse=True)[:10]
        title = "üé§ –¢–æ–ø-10 –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"
        emoji = "üé§"
        field = 'voice'
    else:
        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['total_xp'], reverse=True)[:10]
        title = "‚≠ê –¢–æ–ø-10 –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"
        emoji = "‚≠ê"
        field = 'total'
    
    embed = discord.Embed(
        title=title,
        color=discord.Color.gold(),
        timestamp=datetime.now()
    )
    
    medals = ["ü•á", "ü•à", "ü•â"]
    description = ""
    
    for idx, (user_id, data) in enumerate(sorted_users):
        try:
            member = guild.get_member(int(user_id))
            if not member:
                continue
            
            medal = medals[idx] if idx < 3 else f"`#{idx + 1}`"
            level = data[f'{field}_level']
            xp = data[f'{field}_xp']
            
            description += f"{medal} **{member.display_name}**\n"
            description += f"„ÄÄ‚îú –£—Ä–æ–≤–µ–Ω—å: `{level}`\n"
            description += f"„ÄÄ‚îî –û–ø—ã—Ç: `{xp:,}` XP\n\n"
        except:
            continue
    
    if not description:
        description = "*–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö*"
    
    embed.description = description
    embed.set_footer(
        text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ",
        icon_url=bot.user.display_avatar.url
    )
    
    return embed

# –°–æ–±—ã—Ç–∏–µ: –±–æ—Ç –≥–æ—Ç–æ–≤
@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    load_data()
    
    try:
        synced = await bot.tree.sync()
        print(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}')
    
    voice_xp_task.start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞
@bot.event
async def on_message(message):
    if message.author.bot or not message.guild:
        return
    
    user_id = str(message.author.id)
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if user_id in cooldowns:
        if current_time - cooldowns[user_id] < CONFIG['TEXT_COOLDOWN']:
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    xp = random.randint(CONFIG['TEXT_XP_MIN'], CONFIG['TEXT_XP_MAX'])
    await add_xp(user_id, xp, 'text', message.guild)
    
    cooldowns[user_id] = current_time
    
    await bot.process_commands(message)

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
@bot.event
async def on_voice_state_update(member, before, after):
    if member.bot:
        return
    
    user_id = str(member.id)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
    if before.channel is None and after.channel is not None:
        voice_tracking[user_id] = time.time()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    elif before.channel is not None and after.channel is None:
        if user_id in voice_tracking:
            join_time = voice_tracking[user_id]
            duration = time.time() - join_time
            minutes = int(duration / 60)
            
            if minutes > 0:
                xp = minutes * CONFIG['VOICE_XP_PER_MINUTE']
                await add_xp(user_id, xp, 'voice', member.guild)
            
            del voice_tracking[user_id]

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
@tasks.loop(minutes=1)
async def voice_xp_task():
    for user_id in list(voice_tracking.keys()):
        guild_id = user_id  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å guild_id –∏–∑ voice_tracking
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–∞—á–∏—Å–ª—è–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
        add_xp(user_id, CONFIG['VOICE_XP_PER_MINUTE'], 'voice')

# –°–æ–±—ã—Ç–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.event
async def on_member_join(member):
    await log_action(
        member.guild,
        "–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è",
        f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
        COLORS['SUCCESS'],
        member
    )

@bot.event
async def on_member_remove(member):
    await log_action(
        member.guild,
        "–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª",
        f"–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
        COLORS['WARNING'],
        member
    )

@bot.event
async def on_member_ban(guild, user):
    await log_action(
        guild,
        "–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω",
        f"–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        COLORS['ERROR'],
        user
    )

@bot.event
async def on_member_unban(guild, user):
    await log_action(
        guild,
        "–£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω",
        f"–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–Ω—è—Ç –±–∞–Ω",
        COLORS['SUCCESS'],
        user
    )

@bot.event
async def on_member_update(before, after):
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    if before.roles != after.roles:
        added_roles = [role for role in after.roles if role not in before.roles]
        removed_roles = [role for role in before.roles if role not in after.roles]
        
        if added_roles:
            for role in added_roles:
                await log_action(
                    after.guild,
                    "–†–æ–ª—å –≤—ã–¥–∞–Ω–∞",
                    f"–£—á–∞—Å—Ç–Ω–∏–∫—É –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role.mention}",
                    COLORS['MODERATION'],
                    after
                )
        
        if removed_roles:
            for role in removed_roles:
                await log_action(
                    after.guild,
                    "–†–æ–ª—å –∏–∑—ä—è—Ç–∞",
                    f"–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–Ω—è—Ç–∞ —Ä–æ–ª—å {role.mention}",
                    COLORS['MODERATION'],
                    after
                )
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞
    if before.nick != after.nick:
        await log_action(
            after.guild,
            "–ò–∑–º–µ–Ω–µ–Ω –Ω–∏–∫–Ω–µ–π–º",
            f"**–ë—ã–ª:** `{before.nick or before.display_name}`\n**–°—Ç–∞–ª:** `{after.nick or after.display_name}`",
            COLORS['INFO'],
            after
        )

@bot.event
async def on_message_delete(message):
    if message.author.bot or not message.guild:
        return
    
    await log_action(
        message.guild,
        "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        f"**–ö–∞–Ω–∞–ª:** {message.channel.mention}\n**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {message.content[:1000]}",
        COLORS['WARNING'],
        message.author
    )

@bot.event
async def on_message_edit(before, after):
    if before.author.bot or not before.guild or before.content == after.content:
        return
    
    await log_action(
        before.guild,
        "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
        f"**–ö–∞–Ω–∞–ª:** {before.channel.mention}\n**–ë—ã–ª–æ:** {before.content[:500]}\n**–°—Ç–∞–ª–æ:** {after.content[:500]}",
        COLORS['INFO'],
        before.author
    )

@bot.event
async def on_guild_channel_create(channel):
    await log_action(
        channel.guild,
        "–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω",
        f"**–¢–∏–ø:** {'üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π' if isinstance(channel, discord.TextChannel) else 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π'}\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel.mention}",
        COLORS['SUCCESS']
    )

@bot.event
async def on_guild_channel_delete(channel):
    await log_action(
        channel.guild,
        "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω",
        f"**–¢–∏–ø:** {'üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π' if isinstance(channel, discord.TextChannel) else 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π'}\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{channel.name}`",
        COLORS['ERROR']
    )

@bot.event
async def on_guild_role_create(role):
    await log_action(
        role.guild,
        "–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞",
        f"**–†–æ–ª—å:** {role.mention}\n**–¶–≤–µ—Ç:** `{role.color}`",
        COLORS['SUCCESS']
    )

@bot.event
async def on_guild_role_delete(role):
    await log_action(
        role.guild,
        "–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞",
        f"**–†–æ–ª—å:** `{role.name}`\n**–¶–≤–µ—Ç:** `{role.color}`",
        COLORS['ERROR']
    )

@bot.event
async def on_guild_role_update(before, after):
    if before.name != after.name:
        await log_action(
            after.guild,
            "–†–æ–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞",
            f"**–ë—ã–ª–æ:** `{before.name}`\n**–°—Ç–∞–ª–æ:** `{after.name}`",
            COLORS['INFO'],
            target=None
        )
    
    if before.permissions != after.permissions:
        await log_action(
            after.guild,
            "–ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏",
            f"**–†–æ–ª—å:** {after.mention}",
            COLORS['MODERATION'],
            target=None
        )

# –ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
@bot.tree.command(name="—É—Ä–æ–≤–µ–Ω—å", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É —Å —É—Ä–æ–≤–Ω–µ–º")
async def level_command(interaction: discord.Interaction):
    embed = create_level_embed(interaction.user, interaction.user)
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@bot.tree.command(name="–ø—Ä–æ—Ñ–∏–ª—å", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.describe(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def profile_command(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member = None):
    target = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    embed = create_level_embed(target, target)
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —Ç–æ–ø –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É
@bot.tree.command(name="—Ç–æ–ø_—Ç–µ–∫—Å—Ç", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —á–∞—Ç—É")
async def top_text_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'text')
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —Ç–æ–ø –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É
@bot.tree.command(name="—Ç–æ–ø_–≤–æ–π—Å", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")
async def top_voice_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'voice')
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: –æ–±—â–∏–π —Ç–æ–ø
@bot.tree.command(name="—Ç–æ–ø", description="–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
async def top_total_command(interaction: discord.Interaction):
    embed = create_leaderboard_embed(interaction.guild, 'total')
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.tree.command(name="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∫–∞–Ω–∞–ª", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(–∫–∞–Ω–∞–ª="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")
async def set_channel_command(interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    guild_id = str(interaction.guild.id)
    if guild_id not in server_settings:
        server_settings[guild_id] = {}
    
    server_settings[guild_id]['notification_channel'] = str(–∫–∞–Ω–∞–ª.id)
    save_settings()
    
    embed = discord.Embed(
        description=f"‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {–∫–∞–Ω–∞–ª.mention}",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
@bot.tree.command(name="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–ª–æ–≥–∏", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(–∫–∞–Ω–∞–ª="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
async def set_logs_command(interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    guild_id = str(interaction.guild.id)
    if guild_id not in server_settings:
        server_settings[guild_id] = {}
    
    server_settings[guild_id]['log_channel'] = str(–∫–∞–Ω–∞–ª.id)
    save_settings()
    
    embed = discord.Embed(
        description=f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {–∫–∞–Ω–∞–ª.mention}",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: –≤—ã–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–¥–∞—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–í—ã–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–¢–∏–ø –æ–ø—ã—Ç–∞",
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–¢–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def give_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str],
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    await add_xp(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø.value, interaction.guild)
    
    type_name = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π" if —Ç–∏–ø.value == "text" else "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    embed = discord.Embed(
        description=f"‚úÖ –í—ã–¥–∞–Ω–æ **{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}** XP ({type_name}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}",
        color=discord.Color.green()
    )
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —É–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="—É–±—Ä–∞—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–£–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–¢–∏–ø –æ–ø—ã—Ç–∞",
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–¢–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def remove_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str],
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    await add_xp(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, -–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø.value, interaction.guild)
    
    type_name = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π" if —Ç–∏–ø.value == "text" else "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    embed = discord.Embed(
        description=f"‚úÖ –£–±—Ä–∞–Ω–æ **{–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}** XP ({type_name}) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="—Å–±—Ä–æ—Å–∏—Ç—å_—É—Ä–æ–≤–µ–Ω—å", description="–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    —Ç–∏–ø="–ß—Ç–æ —Å–±—Ä–æ—Å–∏—Ç—å"
)
@app_commands.choices(—Ç–∏–ø=[
    app_commands.Choice(name="–í—Å—ë", value="all"),
    app_commands.Choice(name="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π", value="text"),
    app_commands.Choice(name="–¢–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–π", value="voice"),
])
async def reset_level_command(
    interaction: discord.Interaction,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member,
    —Ç–∏–ø: app_commands.Choice[str]
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    user_id = str(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    user = get_user_data(user_id)
    
    if —Ç–∏–ø.value == "all":
        user['text_xp'] = 0
        user['text_level'] = 1
        user['voice_xp'] = 0
        user['voice_level'] = 1
        user['total_xp'] = 0
        user['total_level'] = 1
        reset_text = "–≤—Å–µ"
    elif —Ç–∏–ø.value == "text":
        user['text_xp'] = 0
        user['text_level'] = 1
        user['total_xp'] = user['voice_xp']
        user['total_level'] = calculate_level(user['total_xp'])
        reset_text = "—Ç–µ–∫—Å—Ç–æ–≤—ã–π"
    elif —Ç–∏–ø.value == "voice":
        user['voice_xp'] = 0
        user['voice_level'] = 1
        user['total_xp'] = user['text_xp']
        user['total_level'] = calculate_level(user['total_xp'])
        reset_text = "–≥–æ–ª–æ—Å–æ–≤–æ–π"
    
    save_data()
    
    embed = discord.Embed(
        description=f"‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã ({reset_text})",
        color=discord.Color.red()
    )
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å_–±–æ—Ç–∞", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
@app_commands.describe(
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–º–∞–∫—Å. 100)",
    –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)"
)
async def clear_bot_command(
    interaction: discord.Interaction,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 50,
    –∫–∞–Ω–∞–ª: discord.TextChannel = None
):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
        return
    
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 1 or –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!", ephemeral=True)
        return
    
    channel = –∫–∞–Ω–∞–ª or interaction.channel
    
    await interaction.response.send_message(f"üßπ –û—á–∏—â–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞...", ephemeral=True)
    
    try:
        def is_bot_message(msg):
            return msg.author == bot.user
        
        deleted = await channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, check=is_bot_message, before=interaction.created_at)
        
        report = await interaction.followup.send(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ {channel.mention}",
            ephemeral=True
        )
        
        await asyncio.sleep(5)
        await report.delete()
        
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", ephemeral=True)

# –ö–æ–º–∞–Ω–¥–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö
@bot.tree.command(name="–ª–æ–≥–∏_–∏–Ω—Ñ–æ", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ª–æ–≥–æ–≤")
async def logs_info_command(interaction: discord.Interaction):
    guild_id = str(interaction.guild.id)
    
    embed = discord.Embed(
        title="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–æ–≤",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    notification_channel = get_notification_channel(guild_id)
    log_channel = get_log_channel(guild_id)
    
    embed.add_field(
        name="üîî –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        value=f"<#{notification_channel}>" if notification_channel else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        inline=True
    )
    
    embed.add_field(
        name="üìù –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤",
        value=f"<#{log_channel}>" if log_channel else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        inline=True
    )
    
    embed.add_field(
        name="üìã –õ–æ–≥–∏—Ä—É–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è",
        value="‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ)\n‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥/–±–∞–Ω)\n‚Ä¢ –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞\n‚Ä¢ –ö–∞–Ω–∞–ª—ã\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã",
        inline=False
    )
    
    if not log_channel:
        embed.add_field(
            name="üí° –°–æ–≤–µ—Ç",
            value="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–ª–æ–≥–∏` —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.run(CONFIG['TOKEN'])